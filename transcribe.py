#!/usr/bin/env python3

"""
Audio Transcription Script using OpenAI Whisper
Transcribes single file or batch-processes all audio files in a directory.
"""

import torch
import whisper
import argparse
from pathlib import Path

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∞—É–¥–∏–æ-—Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
AUDIO_EXTENSIONS = {".mp3", ".wav", ".m4a", ".flac", ".ogg", ".wma", ".aac", ".opus"}

def get_audio_files(directory: Path, extensions=None):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–±–µ–∑ —Ä–µ–∫—É—Ä—Å–∏–∏)."""
    extensions = extensions or AUDIO_EXTENSIONS
    files = [f for f in directory.iterdir() if f.is_file() and f.suffix.lower() in extensions]
    return sorted(files)


def transcribe_file(model, audio_path: Path, language, verbose=False, output_path=None):
    """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    try:
        print(f"‚öô –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è: {audio_path.name}")
        result = model.transcribe(str(audio_path), language=language, verbose=verbose)
        text = result["text"].strip()

        if output_path:
            output_path.write_text(text, encoding="utf-8")
            print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {audio_path}: {e}")
        return False


def main():
    parser = argparse.ArgumentParser(description="üéôÔ∏è –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ —Å –≤—ã–≤–æ–¥–æ–º –ø–æ –∫—É—Å–æ—á–∫–∞–º")

    parser.add_argument(
        "--file", type=str,
        help="‚ñ∂ –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ --multiple)"
    )
    parser.add_argument(
        "--lang", type=str, default="ru",
        help='‚ñ∑ –Ø–∑—ã–∫ –∞—É–¥–∏–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: "ru"). –ü—É—Å—Ç–æ ‚Äî –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ'
    )
    parser.add_argument(
        "--threads", type=int, default=2,
        help="‚ö° –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ CPU-–ø–æ—Ç–æ–∫–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 2)"
    )
    parser.add_argument(
        "--output", type=str, default="transcribe.txt",
        help='‚òÖ –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: "transcribe.txt"), –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ --multiple'
    )
    parser.add_argument(
        "--live", action="store_true", default=False,
        help="‚ñ¢ –í—ã–≤–æ–¥–∏—Ç—å –∫–∞–∂–¥—ã–π —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –∫—É—Å–æ—á–µ–∫ —Å—Ä–∞–∑—É (–≤ –∫–æ–Ω—Å–æ–ª—å)"
    )
    parser.add_argument(
        "--multiple", action="store_true", default=False,
        help="‚òÖ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏. –ë–µ–∑ --file ‚Äî —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è."
    )

    args = parser.parse_args()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PyTorch
    torch.set_num_threads(args.threads)
    print(f"‚ö° –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU-–ø–æ—Ç–æ–∫–æ–≤: {args.threads}")

    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
    print("‚ãØ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ 'small'...")
    model = whisper.load_model("small")

    # –Ø–∑—ã–∫
    language = args.lang or None
    lang_display = args.lang if args.lang else "–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"
    print(f"‚ñ∑ –Ø–∑—ã–∫: {lang_display}")

    # –†–µ–∂–∏–º: –æ–¥–∏–Ω —Ñ–∞–π–ª –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ
    if args.multiple:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        directory = Path(args.file) if args.file else Path(".")
        if not directory.exists():
            print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {directory}")
            return
        if not directory.is_dir():
            print(f"‚ùå –ü—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π: {directory}")
            return

        audio_files = get_audio_files(directory)
        if not audio_files:
            print(f"‚ùå –í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤: {directory}")
            return

        print(f"‚ñ¢ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(audio_files)}")
        for f in audio_files:
            print(f" ‚îú‚îÄ {f.name}")

        print(f"\n‚òÖ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(audio_files)} —Ñ–∞–π–ª–æ–≤...\n")

        success_count = 0
        for i, audio_file in enumerate(audio_files, 1):
            output_file = audio_file.with_suffix(".txt")
            print(f"‚ñ∑ [{i}/{len(audio_files)}] ‚ñ∂ –û–±—Ä–∞–±–æ—Ç–∫–∞: {audio_file.name}")
            if transcribe_file(model, audio_file, language, verbose=False, output_path=output_file):
                success_count += 1

        print(f"\n‚úÖ –ì–æ—Ç–æ–≤–æ: {success_count}/{len(audio_files)} —Ñ–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.")

    else:
        # –†–µ–∂–∏–º –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if not args.file:
            parser.error("--file –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω, –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è --multiple")

        audio_path = Path(args.file)
        if not audio_path.exists():
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {audio_path}")
            return
        if not audio_path.is_file():
            print(f"‚ùå –≠—Ç–æ –Ω–µ —Ñ–∞–π–ª: {audio_path}")
            return
        if audio_path.suffix.lower() not in AUDIO_EXTENSIONS:
            print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Ñ–æ—Ä–º–∞—Ç '{audio_path.suffix}' –º–æ–∂–µ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è.")

        print(f"‚ñ∂ –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é: {audio_path.name}")
        if args.live:
            print("‚ö° –†–µ–∂–∏–º live: –∫–∞–∂–¥–∞—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–∞ —Å—Ä–∞–∑—É")

        try:
            result = model.transcribe(str(audio_path), language=language, verbose=args.live)
            full_text = result["text"].strip()

            output_path = Path(args.output)
            output_path.write_text(full_text, encoding="utf-8")
            print(f"\n‚úÖ –ì–æ—Ç–æ–≤–æ! –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: '{output_path}'")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {e}")


if __name__ == "__main__":
    print("‚òÖ –ó–∞–ø—É—Å–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏...")
    main()